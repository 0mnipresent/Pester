TOPIC
    about_Pester

SHORT DESCRIPTION
    Pester is a test framework for Windows PowerShell. Use the Pester language and its commands
    to write and run tests that verify that your scripts and modules work as designed.

LONG DESCRIPTION
    Pester introduces a professional test framework for Windows PowerShell commands. You
    can use Pester to test commands of any supported type, including scripts, cmdlets, functions, CIM
    commands, workflows, and DSC resources, and test these commands in modules of all types.

    Once the tests are written are verified to work correctly, you can run them automatically or
    on demand at any time to verify that the output didn't change and that any code changes did not 
    introduce errors. You can also add your tests to the build scripts of a continuous integration 
    system, and add new tests at any time.

    Each Pester test compares actual to expected output using a collection of comparison operators
    that mirrors the familiar operators in Windows PowerShell. In this way, Pester supports
    "dynamic testing", that is, it tests the code while it's running, instead of just looking at
    code syntax ("static testing"). 

    Pester is designed to support "test-driven development" (TDD), in which you write and run tests 
    before writing your code, thereby using the test as a code specification. It also supports
    "behavior-driven development" (BDD), in which the tests verify the behavior and output of the code,
    and the user experience, independent of its implementation. This lets you change the implementation
    and use the test to verify that the behavior is unchanged.

    You can use Pester to write "unit tests" that test individual functions in isolation and "integration
    tests" that verify that functions can be used together to generate expected results. Pester manages
    a temporary drive (PSDrive named TestDrive:) that you can use to simulate a file system. 

    Pester also has "mocking" commands that replace the actual output of commands with output that you 
    specify. Mocking lets you test your commands with input that exercised all of its features without 
    creating and maintaining fake entries in a file, directory, or database, or commenting-out and inserting 
    code just for testing. For more information, see about_Mocking.


 THE PESTER LANGUAGE
    To make it easier to write tests, Pester uses a language especially designed for testing. This 
    "domain-specific language" (DSL) hides the standard verb-noun syntax of PowerShell commands. 
    To make it more fluent, the command parameters are positional, so you don't typically use parameter 
    names.	

    For example, the "gets all widgets" test uses the Pester language, including its
    "It", "Should", and "Be" commands. The 

            It "gets all widgets" {
	        Get-Widget | Should Be $allWidgets
            }


    The "gets all widgets" test is enclosed in a Describe block, which typically contains multiple
    related tests.

	Describe "Get-Widget" {
            It "gets all widgets" {
	        Get-Widget | Should Be $allWidgets
            }
        }

    To learn the Pester language, start by reading the following About and cmdlet help topics:

    -- Describe:     Creates a required test container.
    -- Context:      Creates an optional scoped test sub-container.
    -- It:           Creates a test.
    -- about_Should  Compares actual to expected values. This topic also lists all valid 
                     values of Be, which specify the comparison operator used in the test.

   TIP:  Because the script blocks that enclose tests are the values of unnamed positional parameters, 
         the opening brace of each script block must appear on the same line as the command. 




 CREATE TEST FILES
    Pester test files are Windows PowerShell scripts with a .Tests.ps1 filename that enables Pester
    to identify and distinguish tests from other scripts. 

    Typically, the test file and file it tests have the same base file name, such as:

        New-Log.ps1
        New-Log.Tests.ps1

    You can create test files manually or with testing tools, or use the New-Fixture cmdlet in the 
    Pester module to create a script and a matching test file. For example:
        
	New-Fixture -Path C:\ps-test -Name New-Log

	    Directory: C:\ps-test


        Mode                LastWriteTime         Length Name
        ----                -------------         ------ ----
        -a----        4/18/2016   9:51 AM             30 New-Log.ps1
        -a----        4/18/2016   9:51 AM            262 New-Log.Tests.ps1

    The New-Log.ps1 file contains an empty New-Log function.
        
        function New-Log { }

    The New-Log.Tests.ps1 file contains an empty Pester test that is named
    for the New-Log function.
    
        Describe "New-Log" {
            It "does something useful" {
                $true | Should Be $false
            }
        }

    The New-Log.Tests.ps1 file begins with statements that associate the test file with the
    New-Log.ps1 file, and dot-source the New-Log.ps1 file into its scope so it can run the 
    functions in the file during the test.

        $here = Split-Path -Parent $MyInvocation.MyCommand.Path
        $sut = (Split-Path -Leaf $MyInvocation.MyCommand.Path) -replace '\.Tests\.', '.'
        . "$here\$sut"

    TIP:  $here is the path of the .Tests.ps1 file at run time.
          $sut (for "script under test") is the file name of the script that's being tested.

    WARNING: 
    These statements assume that the .Tests.ps1 file and the .ps1 file (script that you're
    testing) are in the same directory. So, if you move them, be sure to replace these 
    statements with code that dot-sources the script file into the test file scope.


    Although you can change the name of the .Tests.ps1 file and the script file by adjusting
    the code that associates them, it's best to use standard names so that anyone who runs
    the tests can easily identify the files.

    Remeber that the .Tests.ps1 file name extension is required for Pester tests.   
    

 RUNNING PESTER TESTS
    Pester tests are Windows PowerShell scripts (.ps1 files), so you can run them at the command line,
    or in any editor.

    Pester also has an Invoke-Pester cmdlet with useful parameters. For example, by default, 
    Invoke-Pester runs all the tests in a directory and all of its subdirectories, but you can 
    run selected tests by specifying a script name or name pattern, a test name, or a test tag. 
    Invoke-Pester parameters also let you save the test output in NUnitXml or LegacyNUnitXml 
    formats that are commonly used by reporting tools.

    For example, the following command runs all tests in the current directory and all subdirectories 
    recursively. It writes output to the host, but does not generate any objects. 

	Invoke-Pester 
    
    In contrast, this command runs only the tests in the New-Log.Tests.ps1 file that have the 'Advanced'
    tag. It writes the test results as custom objects and saves them in NUnitXml format in the NewLogTests.xml
    file.

	Invoke-Pester -Script C:\Tests\New-Log.Tests.ps1 -Tag Advanced -OutputFile .\NewLogTests.xml `
            -OutputFormat NUnitXml -CodeCoverage
 
    For more information about Invoke-Pester, type:  
        Get-Help Invoke-Pester


 PESTER TEST OUTPUT

    When you run a test, Pester use a variation of Write-Host to write color-coded text to
    the console. You'll quickly learn to recognize the purple test names and green (passing)
    and red (failing) test results with the elapsed time of the test.
    
         Describing Get-Profile
          [+] Gets all profiles 156ms
          [+] Gets only profiles 24ms

    The output ends with a summary of the test results.

         Tests completed in 7.47s
         Passed: 40 Failed: 1 Skipped: 0 Pending: 0 Inconclusive: 0
    
    However, because Pester uses Write-Host, it does not write to the output stream (stdout), 
    so there are no output objects to save in a variable or redirect to a file. 

    To direct Pester to create custom objects, use its PassThru parameter. The result is a single
    PSCustomObject with a TestResult property that contains a collection of nested TestResult custom 
    objects.

    To save the custom objects in a file, use the OutputFile and OutputFormat parameters, which
    save the output in NUnitXml and LegacyNUnitXml formats that are easy to parse and commonly
    used by reporting tools.


  REAL-WORLD EXAMPLES
    
    For help in writing Pester tests, you can examine the extensive collection of tests that Pester uses 
    to verify its Windows PowerShell code.

    To find the Pester tests in the Pester module directory, type:

        Get-ChildItem <Pester_module_path>\*Tests.ps1 -Recurse

       -or-

	Get-ChildItem (Get-Module Pester -ListAvailable).ModuleBase -Include *Tests.ps1 -Recurse

    
    Also, Chocolatey, a popular PowerShell based Windows package management system, uses Pester 
    tests to validate its functionality. If you have Chocolately, be sure to examine its tests.


SEE ALSO
    Describe
    Context
    It
    New-Fixture
    Invoke-Pester
    about_Mocking
    about_Should
    about_TestDrive